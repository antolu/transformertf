[project]
name = "transformertf"
dynamic = ["version", "readme"]
description = "Transformers for Time Series"
license = { text = "Other/Proprietary License" }
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: Other/Proprietary License",
  "Natural Language :: English",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Physics",
]
requires-python = "~=3.11"
dependencies = [
  "einops >= 0.7",
  "jsonargparse >= 4.30.0",
  "lightning[pytorch-extra] >= 2.2, < 3.0",
  "matplotlib >= 3.8",
  "numba >= 0.59, < 1.0",
  "numpy >= 1.26, < 2.0",
  "pandas >= 2.2, < 3.0",
  "pyarrow >= 15.0",
  "pytorch-optimizer >= 2.12.0",
  "rich >= 13.7.0",
  "scikit-learn >= 1.4",
  "scipy >= 1.12",
  "torch >= 2.2, < 3.0",
  "omegaconf >= 2.1",
]

[[project.authors]]
name = "Anton Lu"
email = "anton.lu@cern.ch"

[project.urls]
homepage = "https://gitlab.cern.ch/dsb/hysteresis/transformertf"
documentation = "https://acc-py.web.cern.ch/gitlab/dsb/hysteresis/transformertf/docs/stable/"
repository = "https://gitlab.cern.ch/dsb/hysteresis/transformertf"
changelog = "https://gitlab.cern.ch/dsb/hysteresis/transformertf/-/releases"


[project.optional-dependencies]
test = [
  "pytest",
  "pytest-cov",
  "pytest-xdist",
  "pytest-benchmark",
  "pytest-mock",
  "pytest-timeout",
  "hypothesis",
  "factory-boy",
]
doc = ["acc-py-sphinx", "myst-parser", "sphinx-copybutton"]
dev = ["pre-commit", "ruff", "mypy"]
tune = ["ray[tune] >= 2.4.0"]

[build-system]
requires = ["setuptools >= 61", "setuptools-scm[toml] ~= 6.0", "wheel"]
build-backend = "setuptools.build_meta"

# keep this for dynamic versioning
[tool.setuptools_scm]
write_to = "transformertf/_version.py"
local_scheme = "no-local-version"

[tool.setuptools.dynamic]
readme = { file = ["README.md"], content-type = "text/markdown" }

[tool.setuptools.packages.find]
include = ["transformertf*"]
namespaces = false
exclude = ["tests", "tests.*", "build"]

[project.scripts]
transformertf = "transformertf.main:main"
# project endpoints here

[tool.coverage.run]
omit = ["transformertf/_version.py", "transformertf/hysteresis/"]

[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]

exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  ".venv",
]

line-length = 88
target-version = "py311"

preview = true
unsafe-fixes = true

[tool.ruff.lint]
# All rules can be found here: https://docs.astral.sh/ruff/rules/
select = [
  "F",   # pyflakes
  "E",   # error  (pycodestyle)
  "W",   # warning (pycodestyle)
  "I",   # isort
  "N",   # naming  (pep8)
  "UP",  # pyupgrade
  "PLC", # convention  (pylint)
  "PLE", # error  (pylint)
  "PLW", # warning  (pylint)
  # "D",  # docstring (pydocstyle),  # not enabled by default
  "PD",   # pandas
  "TRY",  # tryceratops
  "NPY",  # numpy
  "PERF", # perflint
  "RUF",  # ruff
  # v flake8 v
  "B",
  "C4",
  "FBT",
  "A",
  "EM",
  "ISC",
  "FA",
  "G",
  "PIE",
  "PYI",
  "PT",
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SIM",
]
fixable = ["ALL"]
ignore = [
  "E501",
  "W505",
  "ISC001",
  "PD901",
  "PLW2901",
  "N812",
  "N806",
  "G004",
  "RUF002",
  "FBT001",   # Boolean-typed positional argument
  "FBT002",   # Boolean default positional argument
  "FBT003",   # Boolean positional value in function call
  "NPY002",   # Replace legacy numpy random calls
  "E721",     # Type comparison with ==
  "RUF043",   # Raw string for regex patterns
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
  "SLF001",    # Private member accessed (common in tests)
  "PLC2701",   # Private name import (common in tests)
  "PLC0415",   # Import should be at top-level (common in test functions)
]
"docs/**" = [
  "SLF001",    # Private member accessed (needed for docs)
]

[tool.ruff.format]
preview = true

[tool.mypy]
disallow_untyped_defs = true
plugins = "numpy.typing.mypy_plugin"

[[tool.mypy.overrides]]
module = ["matplotlib.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["transformertf.utils.*", "transformertf.callbacks.*", "transformertf.models.pete.*", "transformertf.models.transformerxl.*"]
ignore_missing_imports = true
ignore_errors = true

[[tool.mypy.overrides]]
module = ["transformertf.data._sample_generator", "transformertf.data._transform_builder", "transformertf.data.datamodule.*", "transformertf.data.dataset.*"]
ignore_missing_imports = true
ignore_errors = true

[[tool.mypy.overrides]]
module = ["transformertf.nn.*", "transformertf.models.transformer.*"]
ignore_missing_imports = true
ignore_errors = true

[[tool.mypy.overrides]]
module = ["transformertf.data.*"]
ignore_missing_imports = true
ignore_errors = true

[[tool.mypy.overrides]]
module = ["transformertf.models.*"]
ignore_missing_imports = true
ignore_errors = true

[[tool.mypy.overrides]]
module = ["transformertf.main"]
ignore_missing_imports = true
ignore_errors = true

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_missing_imports = true
ignore_errors = true

# for pyright LSP
[tool.pyright]
reportPrivateImportUsage = "none"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
#  "-ra",
#  "--strict-markers",
#  "--strict-config",
#  "--cov=transformertf",
#  "--cov-report=term-missing:skip-covered",
#  "--cov-report=html:htmlcov",
#  "--cov-report=xml",
#  "--tb=short",
#  "-n 0",
#  "-p no:warnings",
]
markers = [
  "unit: marks tests as unit tests (isolated component testing)",
  "integration: marks tests as integration tests (component interaction testing)",
  "slow: marks tests as slow (may take >1s to run)",
  "gpu: marks tests that require GPU",
  "property: marks property-based tests",
  "parametrize: marks parametrized tests",
  "smoke: marks smoke tests (quick validation)",
  "regression: marks regression tests",
  "edge_case: marks edge case tests",
  "benchmark: marks benchmark tests",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
  "ignore::UserWarning",
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
]
